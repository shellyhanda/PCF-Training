curl -sv -H "Content-Type: application/json" -d '{"id":"42","deployed": "False","power": "grid","lat": "31.776","lon": "35.217","capacity": "500"}' http://localhost:8080/waste/cans


curl -sv localhost:8080/waste/cans/42

docker container run -it -v ~/trash-can/report:/app --net=iot-net --name=sim node /bin/bash


var servers = ['nats:iot-msg:4222'];
var topic = 'trash-level';
var nats = require('nats').connect({'servers':servers});
nats.subscribe(topic, function(msg) {
console.log('Received report: ' + msg);
});

docker container run -it -v ~/trash-can/report:/app --net=iot-net --name=rep node /bin/bash

docker container run --name rep-data -d --net iot-net -v report-data:/data redis redis-server --appendonly yes

docker container run -it -v ~/trash-can/report:/app --net=iot-net --name=rep-svr node /bin/bash


var nats = require('nats').connect({'servers':['nats:iot-msg:4222']});
var express = require('express');
var http = require('http');
var redis = require('redis');
var app = express();
var client = redis.createClient('6379', 'rep-data');

nats.subscribe('trash-level', function(msg) {
var rep = JSON.parse(msg);
client.set(rep.can_id, rep.level);
console.log('Saved report: ' + msg);
});

app.get('/reports/:can_id', function(req, res) {
client.get(req.params.can_id, function(err, reply) {
if (reply==null) {
res.statusCode = 404;
return res.send('Error: Trash Can not found\n');
}
console.log(reply);
res.send('{"can_id":"' + req.params.can_id + '", "level":"'
+ reply + '"}');
});
});

http.createServer(app).listen(9090, function() {
console.log('Listening on port 9090');
});